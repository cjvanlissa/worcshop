---
title: "WORCS: A Workflow for Open Reproducible Code in Science"
author: "Caspar J. Van Lissa, Brandmaier, Brinkman, Lamprecht, Peikert, Struiksma, & Vreede (2021),<br>*Data Science*, DOI: [10.3233/DS-210031](https://content.iospress.com/articles/data-science/ds210031)"
format: revealjs
---


```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE)
```

<!-- Here, introduce the general principles of open science and the motivation for worcs -->

## Imagine...

You are researching "determinants of loss given default of residential mortgage loans in Portugal" (Like Ramos & Mateus, 2023)

* And tomorrow, Bank of America files for bankruptcy
* Everybody looks at you to produce risk analyses and scenarios
* **Are you ready?!**


## In real life

* This happened during COVID
* In absence of vaccine, **behavior** was the only intervention
* Behavioral scientists wanted to support CDCs worldwide
* Our Dutch CDC said: The onboarding process would take **weeks**
    + We cannot just "scale up"

<font color="red">**Problem:**</font> Workflows not reproducible or shareable

## Solution

* Convened experts on reproducibility to develop WORCS
* Counterexample: PsyCorona (130 scholars worldwide)
* Used WORCS to create open reproducible code and data
    + 20+ publications used those code and data

## Central Argument

* To be able to re-use, share, verify, and collaborate on work...
* ...you must first make it **reproducible** and **shareable**
* Shareable does not mean open to the world
    + You control access
    + "as open as possible/as closed as necessary"

**Solution:** Neatly package your projects in a WORCS "reproducible repository" so you can come back to them in some years, share with colleagues, apply to different projects, etc.

## Defining Open Science

"Open science is just good science" (Jonathan Tennant, 2018)

Formal definitions:

* TOP guidelines (Nosek et al., 2015)
* FAIR principles (Wilkinson et al., 2016)

## Meeting TOP guidelines...

<font size=6>

Relevant to openness and reproducibility^[[Nosek _et al._, 2015](https://osf.io/9f6gx/#!)]:

1. Comprehensive **citation** of resources;
2. **Sharing** data;
3. **Sharing** code;
4. **Sharing** research materials;
5. **Sharing** protocols and documentation;
6. **Pre-registration** of hypotheses before data collection;
7. **Pre-registration** of analysis plan before execution;<br>
8. <font color="gray">_Replication of published results._</font>


</font>

## ...in a FAIR manner

<font size = 6>

* **F**indable^[Wilkinson et al., 2016]
    + Through standardized repositories or cross-repository search engines
    + With Digital Object Identifier (DOI)
* **A**ccessible online for humans and machines
    + Long-term storage
* **I**nteroperable
    + Open file type
* **R**eusability
    + License data, code, and materials for reuse

</font>

## Open science as a paradigm shift {.smaller background-image="https://the-turing-way.netlify.app/_images/reproducibility.jpg" background-size="50%"}

<!-- background-size="contain" -->

<font size =4>

#### Open Science creates opportunities to make science more^[Artwork by Scriberia for [The Turing Way](https://the-turing-way.netlify.com/introduction/introduction), CC-BY)]

- reliable, 
- cumulative,
- collaborative, 
- inclusive

</font>

## Open science as a challenge

#### Where do you start?

#### What tools do you need to learn?

#### What workflow is right for you?

## Introducing WORCS {.smaller}

**W**orkflow for **O**pen **R**eproducible **C**ode in **S**cience

- Standardized workflow
- Low threshold, high ceiling
- Conceptual platform-independent principles: DOI.org/10.3233/DS-210031
- "One-click" solution for R-users: https://cran.r-project.org/package=worcs
- Defaults based on best practices (several experts contributed)
- Compatible with institutional requirements and other workflows
- Pulling down the learning curve!

![](images/learningcurve.svg)


## The tools

### 1. Dynamic document generation

* Fredrik Aust
* Luiza Andrade

### 2. Version control

* Alex Hollingsworth

### 3. Dependency management

* Aaron Peikert

<!-- --- -->
<!-- background-image: url(https://rstudio.com/wp-content/uploads/2014/04/rmarkdown.png) -->
<!-- background-size: 20% 38% -->
<!-- background-position: right top -->

## 1. Dynamic document generation {background-image="https://bookdown.org/yihui/rmarkdown/images/hex-rmarkdown.png" background-position="right top" background-size="20%"}

- Paper consists of **text and code**
- Results, figures, and tables automatically generated
- Formatted as APA paper (including citations!)

### Important because:

- Save time from copy-pasting output and formatting paper
- Eliminate human error in copying results;
- When revising the paper, **all** results are automatically updated;
- Reproducible by default: Just render the document


## R Markdown example

![](images/rmarkdown_example.png)

## R Markdown example rendered

![data-analysis](images/markdown_analysis.png)
![citation](images/markdown_citation.png)

## 2. Version control (using Git)

### Why version control?

:::: {.columns}

::: {.column width="45%"}

<font size=5>

- NO MORE manuscript_final_final_SERIOUSLYFINAL.doc
- "Track Changes" on steroids: record entire project history
- If something breaks, you can figure out what happened.
- Facilitates collaboration and experimentation!

</font>

:::

::: {.column width="10%"}
:::

::: {.column width="45%"}
![final](http://www.phdcomics.com/comics/archive/phd101212s.gif)
:::

::::

## 2. Version control (using Git)

<font size = 5>

```{r, out.width="40%", echo = FALSE}
knitr::include_graphics("images/play-changes.svg")
```

* Tracks changes to (text-based) files line by line
* _add_ files to your repository
* _commit_ changes to these files
* _push_ all commits to remote repository (private backup or public online supplement)

```{r, out.width="45%", echo = FALSE}
knitr::include_graphics("images/git-staging-area.svg")
```

One command in `worcs`: `git_update("Describe your changes")`

</font>




## GitHub {background-image="https://github.githubassets.com/images/modules/logos_page/Octocat.png" background-size="35%" background-position="right top"}

:::: {.columns}

::: {.column width="45%"}

<font size=5>

- `worcs` repository is backed up in a remote repository like [GitHub](https://github.com/);
- GitHub is a **"cloud backup"** with **"social networking"** features
    + Clone other people's repository to reproduce or build upon them
    + Open Issues with questions or comments about the work
    + Send suggested changes as a "Pull request"
- GitHub can be used to 'tag' specific states of the repository, e.g. a preregistration.

</font>

:::

::: {.column width="10%"}
:::

::: {.column width="45%"}

:::

::::

```{r}
#| out.height="70%"
knitr::include_graphics("images/preregistration.png")
```

## Important because: {.smaller}

- Complete backup of entire project history
    * Go back to previous version if you want
    * Try new things, don't worry about losing work
    * Prove that you preregistered your plans and followed them
- Easy collaboration online (even with strangers)
    * People can copy your project and build on it
- GitHub can be your preregistration, your research archive, supplementary materials, comments section, etc.
- Connects to OSF.io project page
    * Improves **F**indability
    * Get DOI for project and/or specific resources
- Connects to Zenodo
    * Get DOI for project and/or specific resources
    * Store project snapshot


## 3. Dependency management

- To make project reproducible, people must have access to your (exact) **software dependencies**
    * For R-users, these are `R-packages`
- Difficult trade-off:

![](images/dependencytradeoff.svg)

## Dependency management in WORCS {background-image="https://rstudio.github.io/renv/reference/figures/logo.svg" background-size="20%" background-position="right top"}

- Maintains text-based list of packages, their version,  
  and origin (e.g., “CRAN”, “Bioconductor”, “GitHub”)
- This list can be version-controlled with Git;
- When a user loads the project,  
    `renv` installs all dependencies from the list
    
### Important because:

- Essential for reproducibility
- Good for collaboration (everybody has same versions)
- Nice to your "future self": Your code will work in the future

<!-- With the background knowledge in mind, let's have another look at the workflow -->

## Unique features in `worcs`

<font size=5.5>

* RStudio template
* Easy GitHub integration
    - Add URL during project creation
    - `git_update("Commit message")`
    - Integration tests to reproduce your results on GitHub!
* Manuscript and preregistration templates
    - From `rticles`, `papaja`, and `prereg`
    - Original templates for secondary- and longitudinal data
* Solutions for data sharing
* Cite `@essential` and `@@nonessential`
* WORCS checklist and badge
* Automatic installation check: `check_worcs_installation()`

</font>

## Sharing data in WORCS

<font size=5>

- Reproducibility requires open data
- Some data may be (privacy) sensitive
    * E.g., microdata subject to GDPR

#### Use `open_data()`:

- Original data made public
- Default is a `.csv` (text based, human / machine readable)
- Other save / load functions can be used

#### Use `closed_data()`:

- Original data saved locally;
- Synthetic data created using `synthetic()`
- Synthetic data made public (default: `.csv`)
- Unique ID of original data made public (so people can audit your work)

</font>

## Sharing data in WORCS

#### Loading data `load_data()`:

- **If** original data are present, load them...
- ...**Else**, load synthetic data
- Scripts can thus ALWAYS be reproduced
- People can create a working script using synthetic data, and send it to you to run on original data
- Load function recorded in `.worcs` file; default `read.csv()`

## Reproducing WORCS Project

1. Create entry point (e.g., `manuscript.Rmd`)
2. Define recipe (e.g., `rmarkdown::render("manuscript.Rmd")`)
3. Snapshot endpoints recipe (e.g., `manuscript.pdf`, `table1.csv`)

`worcs::reproduce()` generates the endpoints from the entry point via the recipe

`worcs::check_endpoints()` verifies that the results are identical

## Continuous Integration

Run `worcs::reproduce()` on GitHub via GitHub Actions

![](action_reproduce.png)